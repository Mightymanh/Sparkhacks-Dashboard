---
import DashboardLayout from "../layouts/DashboardLayout.astro";
import { app, db } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";

// information that will be displayed in dashboard page
let userEmail;
let userName;
let userPhoto;
let registered = false
let appStatus = ""
let isAdmin = false
let submittedDate = ""

const statusMessage = {
  waiting: "We have received your application and will review it shortly. Please check this website and email for updates.",
  declined: "Your application has been declined due to your decision or space limit. Please come back next year to re-apply!",
  waitlist: "Due to limited space, your application has been waitlisted. We will reach out with status updates.",
  accepted: "You've been accepted! Please check your inbox for next steps in the coming days.",
  userAccepted: "You accept to participate SparkHacks. Wait for SparkHacks team to officially accept you.",
  fullyAccepted: "Congratulation ðŸŽ‰ðŸŽ‰ðŸŽ‰! You are officially a SparkHacks 2025 participant! Check inbox for details about schedules."
};

const getMessage = (appStatus: "waiting" | "declined" | "waitlist" | "accepted" | "userAccepted" | "fullyAccepted") => statusMessage[appStatus] || "Unknown result. Please email sparkhacks@uic.edu to reach out our team for support.";

try {
  const auth = getAuth(app);

  // no session or invalid session will redirect to sign in page
  const sessionCookieObj = Astro.cookies.get("__session");
  if (!sessionCookieObj) {
    return Astro.redirect("/");
  }
  const sessionCookie = sessionCookieObj.value;
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  if (!decodedCookie) {
    return Astro.redirect("/");
  }

  // invalid user will redirect to sign in page
  const user = await auth.getUser(decodedCookie.uid);
  if (!user) {
    return Astro.redirect("/");
  }

  userEmail = user.email;
  userName = user.displayName;
  userPhoto = user.photoURL

  // check if user is an admin
  if (user.customClaims && (user.customClaims as any).admin === true) {
    isAdmin = true
  }

  // check if the user already register the application:
  const docSnap = await db.collection("Forms").doc(decodedCookie.email as string).get()
  if (docSnap.exists) {
    registered = true
    const data = docSnap.data()
    appStatus = data?.appStatus || ""
    submittedDate = data?.createdAt.toDate().toLocaleString("en-US", { timeZone: "America/Chicago"}) || ""

  }

} catch (err) {
  console.error(err);
  return Astro.redirect("/");
}
---

<DashboardLayout>
  <section class="user-info">
    <h1>Welcome{isAdmin && " Admin"}, {userName}!</h1>
    <img src={(isAdmin)? "/adminUser.svg" : "/regularUser.svg"} alt="avatar" width="35" height="35" style="border-radius: 9999px;"/>
  </section>
  {isAdmin && 
    <section style="margin-top: 15px">
      <button class="admin-btn" onclick="window.location.assign('/admin')">Go to admin</button>
    </section>
  }
  <section class={`dashboard-status ${(appStatus !== "")? appStatus : ""}`} style={(appStatus !== "")? "" : "display: none"}>
    <strong>Application Status: </strong>{getMessage(appStatus as any)}
    {(appStatus === "accepted") && 
      <>
        <div>Do you still accept to participate SparkHacks?</div>
        <div class="decideBtns">
          <button id="accept-btn">Accept</button>
          <button id="withdraw-btn">Withdraw</button>
        </div>
      </>
    }

  </section>
  <section>
  </section>
  <section class="dashboard-app">
    <div style="display: flex; justify-content: space-between; align-items: center">
      <h2>Application to SparkHacks</h2>
      <div><strong>Close at:</strong> Closed</div>
    </div>
    {(submittedDate !== "") &&
      <div><strong>Submitted at:</strong> {submittedDate}</div>
    }
    <button id="app-btn" disabled={(!registered)? "true" : ""}>
      {(registered)? "View Application" : "Application is closed due to reaching capacity"}
    </button>
  </section>
  <script>
    const acceptBtn = document.getElementById("accept-btn") as HTMLButtonElement
    const withdrawBtn = document.getElementById("withdraw-btn") as HTMLButtonElement
    const appBtn = document.getElementById("app-btn") as HTMLButtonElement
    appBtn?.addEventListener("click", () => {
      window.location.assign("/application");
    });

    const decideSparkhacksCallback = async (action: "userAccepted" | "declined") => {
      try {
        const formData = new FormData()
        formData.set("action", action)
        const res = await fetch("/api/auth/decide-sparkhacks", {
          method: "POST",
          body: formData
        })

        if (!res.ok) {
          alert("Something is wrong")
          return
        }

        window.location.reload()
      }
      catch (err) {
        console.error(err)
        alert("Something is wrong")
      }
    }

    acceptBtn?.addEventListener("click", () => decideSparkhacksCallback("userAccepted"))
    withdrawBtn?.addEventListener("click", () => decideSparkhacksCallback("declined"))
  </script>
</DashboardLayout>
<style>
  .user-info {
    width: 1000px;
    max-width: 100%;
    margin-top: 70px;
    font-size: x-large;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .user-info > h1 {
    margin: 0;
    padding-left: 0;
  }
  .dashboard-status {
    box-sizing: border-box;
    width: 1000px;
    max-width: 100%;
    margin-top: 20px;
    border-radius: 4px;
    padding: 20px;
  }
  .dashboard-status.waiting, .dashboard-status.waitlist {
    background-color: #f5e3bd
  }
  .dashboard-status.declined {
    background-color: #f88378;
  }
  .dashboard-status.accepted {
    background-color: #afd9ae;
  }
  .dashboard-status.userAccepted {
    background-color: #7cba7b;
  }
  .dashboard-status.fullyAccepted {
    background-color: #aefead;
  }
  
  .dashboard-app {
    box-sizing: border-box;
    width: 1000px;
    max-width: 100%;
    margin-top: 20px;
    padding: 20px;
    border-radius: .75em;
    border: 4px solid #C0EDFF;
  }
  #app-btn {
    margin-top: 16px;
    width: 100%;
    padding: 16px 32px;
    font-size: larger;
    background-color: #C0EDFF;
    /* color: white; */
    border: none;
    border-radius: 8px;
    cursor: pointer;
  }
  #app-btn:hover {
    filter: brightness(80%);
  }

  .decideBtns {
    margin-top: 10px;
    display: flex;
    gap: 10px;
  }
  #accept-btn, #withdraw-btn {
    cursor: pointer;
    flex: 1;
    border: none;
    border-radius: 4px;
    padding: 16px 16px;
    font-size: 16px;
  }

  #accept-btn {
    background-color: white;
  }

  #withdraw-btn {
    background-color: #ff8a8a
  }

  .admin-btn {
    padding: 8px 16px;
    background-color: aqua;
    cursor: pointer;
    border: none;
    border-radius: 8px;
  }

</style>
